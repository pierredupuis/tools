#! /bin/bash

WIN_SUMMARY="filescan pslist handles iehistory hashdump truecryptsummary devicetree clipboard"
LINUX_SUMMARY="pslist psaux lsof bash netstat ifconfig dmesg mount enumerate_files"
MAC_SUMMARY="pslist psaux lsof bash netstat ifconfig dmesg keychaindump mount list_files adium calendar contacts"

usage() {
	DEF="\e[0;39m"
	BOLD="\e[1m"

	this=$(basename $0)

	printf "%s" "
$(echo -e "${BOLD}SUMMARY${DEF}")
	$this - Automates volatility usage

$(echo -e "${BOLD}USAGE${DEF}")
	$this <script_options> <action> <action_options>
	$this init [<memory_dump_file> [<vol_profile> [<results_dir>]]]
	$this summary [windows|linux|mac]
	$this [-t|--tee] <vol_plugin> <plugin_options>

$(echo -e "${BOLD}DEFINITION${DEF}")
	Relieve the user from having to specify the profile and memory dump file on each volatility command.

	The init argument let you set these options. They will be kept in the '.vl' file
	This means the script is directory-specific, it is not possible to remember two different cases stored in a single directory.

	The script needs 3 things:
	 - Memory dump file
	 - Volatility profile
	 - Results directory (defaults to current directory)

$(echo -e "${BOLD}SCRIPT OPTIONS${DEF}")
	-h, --help
		Show this message

	-t, --tee
		When running a plugin, also outputs the results in a file.
		This file will be located in the Results Directory given in the configuration.

$(echo -e "${BOLD}ACTIONS & ACTIONS OPTIONS${DEF}")
	<plugin> <plugin_options>
		Run the given volatility profile.
		Any argument given after this action is relayed to the volatility command line.

	init [<memory_dump_file> [<profile> [<results_dir>]]]
		Inititalize configuration values.
		You can specify them following the argument, in this exact order.
		If one is missing or empty the script will prompt for it.

	summary [windows|linux|mac]
		Run a selection of plugins and output the result in corresponding files. Those files will be located in the Results Directory given in the configuration
		Plugins are OS-sensitive. By default, windows is used but you can specify linux or mac after the argument to change that.
		Warning: Volatility plugins that are creating files themselves will not do so in the Results Directory unless you tell them. It usually concerns the dump plugins, here you can use the plugin option -D <dump-dir>. Refer to the volatility documentation for more details.

"


}

run_win() {
	plg="$1"
	shift

	echo "Executing plugin $plg..."
	volatility -f "$memdump" --profile "$profile" "$plg" $* > "$resdir/$plg"
}

run_linux() {
	plg="$1"
	shift

	echo "Executing plugin linux_$plg..."
	volatility -f "$memdump" --profile "$profile" "linux_$plg" $* > "$resdir/$plg"
}
run_mac() {
	plg="$1"
	shift

	echo "Executing plugin mac_$plg..."
	volatility -f "$memdump" --profile "$profile" "mac_$plg" $* > "$resdir/$plg"
}

write_conf() {
	if [ -n "$1" ] && [ -n "$2" ] && [ -n "$3" ]; then
		echo "profile:$1" > ".vl"
		echo "memdump:$2" >> ".vl"
		echo "resdir:$3" >> ".vl"
	else
		return -1
	fi
}

read_conf() {
	if [ -f ".vl" ]; then
		# Get the corresponding line then select the value
		profile=$(grep 'profile:' '.vl' | cut -d':' -f 2)
		memdump=$(grep 'memdump:' '.vl' | cut -d':' -f 2)
		resdir=$(grep 'resdir:' '.vl' | cut -d':' -f 2)
	else
		return -1
	fi
}

print_conf() {
	echo "Profile: $profile"
	echo "Memory dump: $memdump"
	echo "Results directory: $resdir"
}

init(){
	# Get memdump, profile and resutls directory from arguments if here
	memdump="$1"
	profile="$2"
	resdir="$3"

	# Get memdump from user if missing
	if [ -z "$1" ]; then
		read -p "Memory dump file: " memdump
	fi
	# Get profile from user if missing
	if [ -z "$2" ]; then
		volatility -f "$memdump" imageinfo | grep "Suggested"
		read -p "Use profile: " profile
	fi
	# Get result directory from user if missing
	if [ -z "$3" ]; then
		read -p "Results directory: [.] " resdir
		if [ -z "$resdir" ]; then
			resdir="."
		fi
	fi
	
	# Write to configuration files
	write_conf "$profile" "$memdump" "$resdir"
}

summary() {
	if [ -z "$1" ]; then
		os="windows"
	else
		os="$1"
	fi
	case "$os" in
		"windows")
			for plg in $WIN_SUMMARY; do
				run_win $plg
			done
			# Version-specific plugins
			if grep -E "(XP|2003)" -q ".profile"; then
				run_win connections
				run_win sockets
			else
				run_win netscan
			fi
			# Plugins with additional arguments
			run_win evtlogs -D evtlogs
		;;
		"linux")
			for plg in $LINUX_SUMMARY; do
				run_linux $plg
			done
			;;
		"mac")
			for plg in $MAC_SUMMARY; do
				run_mac $plg
			done
			;;
		*)
			echo "Error: \"$os\" not recognied"
			exit -1
		;;
	esac
}
cmd() {
	echo "volatility -f $memdump --profile $profile $*"
	volatility -f "$memdump" --profile "$profile" $*
}

cmdtee() {
	echo "volatility -f $memdump --profile $profile $* | tee \"$resdir/$1\""
	volatility -f "$memdump" --profile "$profile" $* | tee "$resdir/$1"
}

if [ -f ".vl" ]; then
	read_conf
else
	init
	exit 0
fi


# Parse script options until the end or action found
while [ -n "$1" ] && [ -z "$action" ]; do
	case $1 in
		-h|--help)
			usage;
			exit 0
			;;
		-t|--tee)
			USE_TEE=1
			;;
		*)
			action=$1
			;;
	esac
	shift
done

# If no action is given, prints configuration
if [ -z "$action" ]; then
	print_conf
	echo
	exit 0
fi

# Parse action
case $action in
	init)
		init $*
		;;
	summary)
		summary $*
		;;
	*)
		if [ "$USE_TEE" == "1" ]; then
			cmdtee $*
		else
			cmd $*
		fi
		;;
esac


